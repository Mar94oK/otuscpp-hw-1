name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  TARGET_NAME: "helloworld"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run:  |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_NUMBER=$GITHUB_RUN_NUMBER -DTARGET_NAME=${{ env.TARGET_NAME }}
        cd ..
        ls -la
        BINARY_VERSION=$(<"binary_version.txt")
        echo "Current Binary Version BINARY_VERSION':' $BINARY_VERSION"
        echo "BINARY_VERSION=$BINARY_VERSION" >> $GITHUB_ENV

    - name: Print Current Build Number
      run: echo "Current Build number':' $GITHUB_RUN_NUMBER"

    - name: Check BINARY_VERSION Defined by Cmake run. (Crutch!!!)
      run: echo "Current Binary Version BINARY_VERSION':' ${{ env.BINARY_VERSION }}"

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: PostBuild
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        echo "Testing Post-Build"
        ls -la
        ls -la build/
        ./tools/makeDebPackage.sh --binary-name=${{ env.TARGET_NAME }} --binary-version=${{ env.BINARY_VERSION }} --binary-path=build --install-path=build

    - name: Copy Deb Package to the Releases Directory
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        echo "Testing Commiting .deb package to Releases"
        find build/ -name \*.deb -exec cp {} Releases/ \;
        cd Releases
        ls -la

    - name: Commiting new .deb Package
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        echo "Testing git commands to commit new .Deb package to Releases"
        ls -la


    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
      
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artefacts
        path: |
          build/${{ env.TARGET_NAME }}
          ${{github.workspace}}/*.deb
